unify(X,Y,𝜃) = 
 X = X𝜃
 Y = Y𝜃
 case 
  X is a variable that does not occur in Y:
   return (𝜃{X/Y} ∪ {X/Y}) /*replace X with Y in the substitution terms of 𝜃 add X/Y to 𝜃*/
  Y is a variable that does not occur in X:
   return (𝜃{Y/X} ∪ {Y/X}) /*replace Y with X in the substitution terms of 𝜃 add Y/X to 𝜃*/
  X and Y are indentical constants or variables:
   return 𝜃
  X is f(X1,...,Xn) and Y is f(Y1,...,Yn):
   return (fold_left (fun 𝜃 (X,Y) -> unify(X,Y,𝜃)) 
               𝜃 [(X1,Y1),...,(Xn,Yn)])
  otherwise:
   raise FAIL
}

let unify(X,Y) = unify(X,Y,ϵ)










def unifyChanged(t1,t2,dict):
		x = substitute_in_term(dict,t1)
		y = substitute_in_term(dict,t2)
		if (occurs_check(x,y) == False):
			ans = substitute_in_clause(dict,x)
			ans[x] = Y
			return ans

	def unify (self, t1: Term, t2: Term) -> dict:
		return unifyChanged(t1,t2,s={})





















































for count, x in enumerate(t.terms):
			t.terms[count] = s.get(x,x)
		return t



for count, x in enumerate(c.head.terms):
			c.head.terms[count] = s.get(x,x)
		return c


if isinstance(c,Rule):
			new_terms = []
			for term in c.head.terms:
				new_terms.append(s.get(term,term))
		return Rule(new_terms,Rule)


if isinstance(c,Rule):
			new_terms = []
			for term in c.head.terms:
				new_terms.append(s.get(term,term))
			return Rule(c.relation,new_terms)














def unify (self, x: Term, y: Term) -> dict:
		s = {}
		if x==y:
			return s
		elif is_variable(x):
			return unify_var(x, y, s)
		elif is_variable(y):
        	return unify_var(y, x, s)
    	elif isinstance(x, Expr) and isinstance(y, Expr):
        	return unify(x.args, y.args, unify(x.op, y.op, s))
    	elif isinstance(x, str) or isinstance(y, str):
        	return None
    	elif issequence(x) and issequence(y) and len(x) == len(y):
        	if not x:
            	return s
        	return unify(x[1:], y[1:], unify(x[0], y[0], s))
    	else:
        	return None
	
	def is_variable(x):
    """A variable is an Expr with no args and a lowercase symbol as the op."""
    	return isinstance(x, Expr) and not x.args and x.op[0].islower()

	def unify_var(var, x, s):
    	if var in s:
        	return unify(s[var], x, s)
    	elif x in s:
        	return unify(var, s[x], s)
    	elif occur_check(var, x, s):
        	return None
    	else:
        	new_s = extend(s, var, x)
        	cascade_substitution(new_s)
        	return new_s

	def occur_check(var, x, s):
    """Return true if variable var occurs anywhere in x
    (or in subst(s, x), if s has a binding for x)."""
    	if var == x:
        	return True
    	elif is_variable(x) and x in s:
        	return occur_check(var, s[x], s)
    	elif isinstance(x, Expr):
        	return (occur_check(var, x.op, s) or
                occur_check(var, x.args, s))
    	elif isinstance(x, (list, tuple)):
        	return first(e for e in x if occur_check(var, e, s))
    	else:
        	return False
	
	def subst(s, x):
    """Substitute the substitution s into the expression x.
    	 subst({x: 42, y:0}, F(x) + y)
    (F(42) + 0)
    """
    	if isinstance(x, list):
        	return [subst(s, xi) for xi in x]
    	elif isinstance(x, tuple):
        	return tuple([subst(s, xi) for xi in x])
    	elif not isinstance(x, Expr):
        	return x
    	elif is_var_symbol(x.op):
        	return s.get(x, x)
    	else:
        	return Expr(x.op, *[subst(s, arg) for arg in x.args])

	def cascade_substitution(s):
		for x in s:
        s[x] = subst(s, s.get(x))
        if isinstance(s.get(x), Expr) and not is_variable(s.get(x)):
            # Ensure Function Terms are correct updates by passing over them again
            s[x] = subst(s, s.get(x))

	def unify_mm(x, y, s={}):
		set_eq = extend(s, x, y)
    	s = set_eq.copy()
    	while True:
        	trans = 0
        	for x, y in set_eq.items():
            	if x == y:
                	# if x = y this mapping is deleted (rule b)
                	del s[x]
            	elif not is_variable(x) and is_variable(y):
                	# if x is not a variable and y is a variable, rewrite it as y = x in s (rule a)
                	if s.get(y, None) is None:
                    	s[y] = x
                    	del s[x]
                	else:
                    	# if a mapping already exist for variable y then apply
                    	# variable elimination (there is a chance to apply rule d)
                    	s[x] = vars_elimination(y, s)
            	elif not is_variable(x) and not is_variable(y):
                	# in which case x and y are not variables, if the two root function symbols
                	# are different, stop with failure, else apply term reduction (rule c)
                	if x.op is y.op and len(x.args) == len(y.args):
                    	term_reduction(x, y, s)
                    	del s[x]
                	else:
                    	return None
            	elif isinstance(y, Expr):
                	# in which case x is a variable and y is a function or a variable (e.g. F(z) or y),
                	# if y is a function, we must check if x occurs in y, then stop with failure, else
                	# try to apply variable elimination to y (rule d)
                	if occur_check(x, y, s):
                    	return None
                	s[x] = vars_elimination(y, s)
                	if y == s.get(x):
                    	trans += 1
            	else:
                	trans += 1
        	if trans == len(set_eq):
            	# if no transformation has been applied, stop with success
            	return s
        	set_eq = s.copy()

	def term_reduction(x, y, s):
		for i in range(len(x.args)):
        if x.args[i] in s:
            s[s.get(x.args[i])] = y.args[i]
        else:
            s[x.args[i]] = y.args[i]

	def vars_elimination(x, s):
		if not isinstance(x, Expr):
        	return x
    	if is_variable(x):
        	return s.get(x, x)
    	return Expr(x.op, *[vars_elimination(arg, s) for arg in x.args])

	def standardize_variables(sentence, dic=None):
    """Replace all the variables in sentence with new variables."""
    	if dic is None:
        	dic = {}
    	if not isinstance(sentence, Expr):
        	return sentence
    	elif is_var_symbol(sentence.op):
        	if sentence in dic:
            	return dic[sentence]
        	else:
            	v = Expr('v_{}'.format(next(standardize_variables.counter)))
            	dic[sentence] = v
            	return v
    	else:
        	return Expr(sentence.op, *[standardize_variables(a, dic) for a in sentence.args])

	standardize_variables.counter = itertools.count()